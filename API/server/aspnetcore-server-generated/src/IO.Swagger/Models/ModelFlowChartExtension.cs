/*
 * Machine fault diagnosis
 *
 * List of top level server APIs
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ModelFlowChartExtension : IEquatable<ModelFlowChartExtension>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets FixedConfig
        /// </summary>
        [DataMember(Name="fixed_config")]
        public ModelFlowChartExtensionFixedConfig FixedConfig { get; set; }

        /// <summary>
        /// the address in DB where the installation script is stored
        /// </summary>
        /// <value>the address in DB where the installation script is stored</value>
        [DataMember(Name="install_script")]
        public string InstallScript { get; set; }

        /// <summary>
        /// where to retrieve the extension starting script
        /// </summary>
        /// <value>where to retrieve the extension starting script</value>
        [DataMember(Name="start_script")]
        public string StartScript { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelFlowChartExtension {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FixedConfig: ").Append(FixedConfig).Append("\n");
            sb.Append("  InstallScript: ").Append(InstallScript).Append("\n");
            sb.Append("  StartScript: ").Append(StartScript).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ModelFlowChartExtension)obj);
        }

        /// <summary>
        /// Returns true if ModelFlowChartExtension instances are equal
        /// </summary>
        /// <param name="other">Instance of ModelFlowChartExtension to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelFlowChartExtension other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    FixedConfig == other.FixedConfig ||
                    FixedConfig != null &&
                    FixedConfig.Equals(other.FixedConfig)
                ) && 
                (
                    InstallScript == other.InstallScript ||
                    InstallScript != null &&
                    InstallScript.Equals(other.InstallScript)
                ) && 
                (
                    StartScript == other.StartScript ||
                    StartScript != null &&
                    StartScript.Equals(other.StartScript)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (FixedConfig != null)
                    hashCode = hashCode * 59 + FixedConfig.GetHashCode();
                    if (InstallScript != null)
                    hashCode = hashCode * 59 + InstallScript.GetHashCode();
                    if (StartScript != null)
                    hashCode = hashCode * 59 + StartScript.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ModelFlowChartExtension left, ModelFlowChartExtension right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ModelFlowChartExtension left, ModelFlowChartExtension right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
