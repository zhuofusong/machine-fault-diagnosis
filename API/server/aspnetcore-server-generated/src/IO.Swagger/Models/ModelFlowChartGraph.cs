/*
 * Machine fault diagnosis
 *
 * List of top level server APIs
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ModelFlowChartGraph : IEquatable<ModelFlowChartGraph>
    { 
        /// <summary>
        /// Gets or Sets Nodes
        /// </summary>
        [Required]
        [DataMember(Name="nodes")]
        public List<ModelFlowChartNodeMeta> Nodes { get; set; }

        /// <summary>
        /// Gets or Sets NodeComponents
        /// </summary>
        [DataMember(Name="node_components")]
        public List<ModelFlowChartNodeComponentMeta> NodeComponents { get; set; }

        /// <summary>
        /// Gets or Sets Edges
        /// </summary>
        [Required]
        [DataMember(Name="edges")]
        public List<ModelFlowChartEdgeMeta> Edges { get; set; }

        /// <summary>
        /// Gets or Sets Extensions
        /// </summary>
        [DataMember(Name="extensions")]
        public List<ModelFlowChartExtensionMeta> Extensions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelFlowChartGraph {\n");
            sb.Append("  Nodes: ").Append(Nodes).Append("\n");
            sb.Append("  NodeComponents: ").Append(NodeComponents).Append("\n");
            sb.Append("  Edges: ").Append(Edges).Append("\n");
            sb.Append("  Extensions: ").Append(Extensions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ModelFlowChartGraph)obj);
        }

        /// <summary>
        /// Returns true if ModelFlowChartGraph instances are equal
        /// </summary>
        /// <param name="other">Instance of ModelFlowChartGraph to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelFlowChartGraph other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Nodes == other.Nodes ||
                    Nodes != null &&
                    Nodes.SequenceEqual(other.Nodes)
                ) && 
                (
                    NodeComponents == other.NodeComponents ||
                    NodeComponents != null &&
                    NodeComponents.SequenceEqual(other.NodeComponents)
                ) && 
                (
                    Edges == other.Edges ||
                    Edges != null &&
                    Edges.SequenceEqual(other.Edges)
                ) && 
                (
                    Extensions == other.Extensions ||
                    Extensions != null &&
                    Extensions.SequenceEqual(other.Extensions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Nodes != null)
                    hashCode = hashCode * 59 + Nodes.GetHashCode();
                    if (NodeComponents != null)
                    hashCode = hashCode * 59 + NodeComponents.GetHashCode();
                    if (Edges != null)
                    hashCode = hashCode * 59 + Edges.GetHashCode();
                    if (Extensions != null)
                    hashCode = hashCode * 59 + Extensions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ModelFlowChartGraph left, ModelFlowChartGraph right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ModelFlowChartGraph left, ModelFlowChartGraph right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
