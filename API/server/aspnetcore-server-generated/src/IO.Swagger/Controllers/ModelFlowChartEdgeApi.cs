/*
 * Machine fault diagnosis
 *
 * List of top level server APIs
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ModelFlowChartEdgeApiController : ControllerBase
    { 
        /// <summary>
        /// delete an edge&#x27;s information in a model flow chart
        /// </summary>
        /// <remarks>delete an edge&#x27;s information in a model flow chart</remarks>
        /// <param name="modelFlowId">model flow chart id</param>
        /// <param name="edgeId">edge&#x27;s id in a model flow chart</param>
        /// <response code="200">edge deleted</response>
        /// <response code="400">input is invalid</response>
        /// <response code="404">model flow chart edge not found</response>
        /// <response code="500">internal server error</response>
        [HttpDelete]
        [Route("/zhuofusong/machine-fault-diagnosis/1.0.0/modelFlow/node/{modelFlowId}/{edgeId}")]
        [ValidateModelState]
        [SwaggerOperation("ModelFlowNodeModelFlowIdEdgeIdDelete")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "edge deleted")]
        public virtual IActionResult ModelFlowNodeModelFlowIdEdgeIdDelete([FromRoute][Required]string modelFlowId, [FromRoute][Required]string edgeId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);
            string exampleJson = null;
            exampleJson = "{ }";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Object>(exampleJson)
                        : default(Object);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// retrieve an edge&#x27;s information in a model flow chart
        /// </summary>
        /// <remarks>retrieve an edge&#x27;s information in a model flow chart</remarks>
        /// <param name="modelFlowId">model flow chart id</param>
        /// <param name="edgeId">edge&#x27;s id in a model flow chart</param>
        /// <response code="200">edge returned</response>
        /// <response code="400">input is invalid</response>
        /// <response code="404">model flow chart edge not found</response>
        /// <response code="500">internal server error</response>
        [HttpGet]
        [Route("/zhuofusong/machine-fault-diagnosis/1.0.0/modelFlow/node/{modelFlowId}/{edgeId}")]
        [ValidateModelState]
        [SwaggerOperation("ModelFlowNodeModelFlowIdEdgeIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ModelFlowChartEdgeMeta>), description: "edge returned")]
        public virtual IActionResult ModelFlowNodeModelFlowIdEdgeIdGet([FromRoute][Required]string modelFlowId, [FromRoute][Required]string edgeId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ModelFlowChartEdgeMeta>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);
            string exampleJson = null;
            exampleJson = "[ {\n  \"modifiedTime\" : 6.027456183070403,\n  \"comments\" : \"comments\",\n  \"kind\" : \"kind\",\n  \"author\" : \"author\",\n  \"createdTime\" : 0.8008281904610115,\n  \"id\" : \"id\"\n}, {\n  \"modifiedTime\" : 6.027456183070403,\n  \"comments\" : \"comments\",\n  \"kind\" : \"kind\",\n  \"author\" : \"author\",\n  \"createdTime\" : 0.8008281904610115,\n  \"id\" : \"id\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ModelFlowChartEdgeMeta>>(exampleJson)
                        : default(List<ModelFlowChartEdgeMeta>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// create an edge&#x27;s information in a model flow chart
        /// </summary>
        /// <remarks>create an edge&#x27;s information in a model flow chart</remarks>
        /// <param name="modelFlowId">model flow chart id</param>
        /// <param name="edgeId">edge&#x27;s id in a model flow chart</param>
        /// <response code="200">edge created</response>
        /// <response code="400">input is invalid</response>
        /// <response code="404">model flow chart not found. create one first.</response>
        /// <response code="500">internal server error</response>
        [HttpPost]
        [Route("/zhuofusong/machine-fault-diagnosis/1.0.0/modelFlow/node/{modelFlowId}/{edgeId}")]
        [ValidateModelState]
        [SwaggerOperation("ModelFlowNodeModelFlowIdEdgeIdPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ModelFlowChartEdgeMeta>), description: "edge created")]
        public virtual IActionResult ModelFlowNodeModelFlowIdEdgeIdPost([FromRoute][Required]string modelFlowId, [FromRoute][Required]string edgeId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ModelFlowChartEdgeMeta>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);
            string exampleJson = null;
            exampleJson = "[ {\n  \"modifiedTime\" : 6.027456183070403,\n  \"comments\" : \"comments\",\n  \"kind\" : \"kind\",\n  \"author\" : \"author\",\n  \"createdTime\" : 0.8008281904610115,\n  \"id\" : \"id\"\n}, {\n  \"modifiedTime\" : 6.027456183070403,\n  \"comments\" : \"comments\",\n  \"kind\" : \"kind\",\n  \"author\" : \"author\",\n  \"createdTime\" : 0.8008281904610115,\n  \"id\" : \"id\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ModelFlowChartEdgeMeta>>(exampleJson)
                        : default(List<ModelFlowChartEdgeMeta>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// update an edge&#x27;s information in a model flow chart
        /// </summary>
        /// <remarks>update an edge&#x27;s information in a model flow chart</remarks>
        /// <param name="modelFlowId">model flow chart id</param>
        /// <param name="edgeId">edge&#x27;s id in a model flow chart</param>
        /// <response code="200">edge updated</response>
        /// <response code="400">input is invalid</response>
        /// <response code="404">model flow chart not found. create one first.</response>
        /// <response code="500">internal server error</response>
        [HttpPut]
        [Route("/zhuofusong/machine-fault-diagnosis/1.0.0/modelFlow/node/{modelFlowId}/{edgeId}")]
        [ValidateModelState]
        [SwaggerOperation("ModelFlowNodeModelFlowIdEdgeIdPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ModelFlowChartEdgeMeta>), description: "edge updated")]
        public virtual IActionResult ModelFlowNodeModelFlowIdEdgeIdPut([FromRoute][Required]string modelFlowId, [FromRoute][Required]string edgeId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ModelFlowChartEdgeMeta>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);
            string exampleJson = null;
            exampleJson = "[ {\n  \"modifiedTime\" : 6.027456183070403,\n  \"comments\" : \"comments\",\n  \"kind\" : \"kind\",\n  \"author\" : \"author\",\n  \"createdTime\" : 0.8008281904610115,\n  \"id\" : \"id\"\n}, {\n  \"modifiedTime\" : 6.027456183070403,\n  \"comments\" : \"comments\",\n  \"kind\" : \"kind\",\n  \"author\" : \"author\",\n  \"createdTime\" : 0.8008281904610115,\n  \"id\" : \"id\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<ModelFlowChartEdgeMeta>>(exampleJson)
                        : default(List<ModelFlowChartEdgeMeta>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
