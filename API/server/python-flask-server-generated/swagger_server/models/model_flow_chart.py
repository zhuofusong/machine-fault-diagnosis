# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.model_flow_chart_graph import ModelFlowChartGraph  # noqa: F401,E501
from swagger_server import util


class ModelFlowChart(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, graph: ModelFlowChartGraph=None):  # noqa: E501
        """ModelFlowChart - a model defined in Swagger

        :param id: The id of this ModelFlowChart.  # noqa: E501
        :type id: str
        :param graph: The graph of this ModelFlowChart.  # noqa: E501
        :type graph: ModelFlowChartGraph
        """
        self.swagger_types = {
            'id': str,
            'graph': ModelFlowChartGraph
        }

        self.attribute_map = {
            'id': 'id',
            'graph': 'graph'
        }
        self._id = id
        self._graph = graph

    @classmethod
    def from_dict(cls, dikt) -> 'ModelFlowChart':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The modelFlowChart of this ModelFlowChart.  # noqa: E501
        :rtype: ModelFlowChart
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this ModelFlowChart.


        :return: The id of this ModelFlowChart.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ModelFlowChart.


        :param id: The id of this ModelFlowChart.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def graph(self) -> ModelFlowChartGraph:
        """Gets the graph of this ModelFlowChart.


        :return: The graph of this ModelFlowChart.
        :rtype: ModelFlowChartGraph
        """
        return self._graph

    @graph.setter
    def graph(self, graph: ModelFlowChartGraph):
        """Sets the graph of this ModelFlowChart.


        :param graph: The graph of this ModelFlowChart.
        :type graph: ModelFlowChartGraph
        """
        if graph is None:
            raise ValueError("Invalid value for `graph`, must not be `None`")  # noqa: E501

        self._graph = graph
