# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.model_flow_chart import ModelFlowChart  # noqa: F401,E501
from swagger_server import util


class ModelFlowChartNodeComponent(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, linked_node_id: str=None, fixed_config: object=None, component_sub_graph: ModelFlowChart=None):  # noqa: E501
        """ModelFlowChartNodeComponent - a model defined in Swagger

        :param id: The id of this ModelFlowChartNodeComponent.  # noqa: E501
        :type id: str
        :param linked_node_id: The linked_node_id of this ModelFlowChartNodeComponent.  # noqa: E501
        :type linked_node_id: str
        :param fixed_config: The fixed_config of this ModelFlowChartNodeComponent.  # noqa: E501
        :type fixed_config: object
        :param component_sub_graph: The component_sub_graph of this ModelFlowChartNodeComponent.  # noqa: E501
        :type component_sub_graph: ModelFlowChart
        """
        self.swagger_types = {
            'id': str,
            'linked_node_id': str,
            'fixed_config': object,
            'component_sub_graph': ModelFlowChart
        }

        self.attribute_map = {
            'id': 'id',
            'linked_node_id': 'linked_node_id',
            'fixed_config': 'fixed_config',
            'component_sub_graph': 'component_sub_graph'
        }
        self._id = id
        self._linked_node_id = linked_node_id
        self._fixed_config = fixed_config
        self._component_sub_graph = component_sub_graph

    @classmethod
    def from_dict(cls, dikt) -> 'ModelFlowChartNodeComponent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The modelFlowChartNodeComponent of this ModelFlowChartNodeComponent.  # noqa: E501
        :rtype: ModelFlowChartNodeComponent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this ModelFlowChartNodeComponent.


        :return: The id of this ModelFlowChartNodeComponent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ModelFlowChartNodeComponent.


        :param id: The id of this ModelFlowChartNodeComponent.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def linked_node_id(self) -> str:
        """Gets the linked_node_id of this ModelFlowChartNodeComponent.


        :return: The linked_node_id of this ModelFlowChartNodeComponent.
        :rtype: str
        """
        return self._linked_node_id

    @linked_node_id.setter
    def linked_node_id(self, linked_node_id: str):
        """Sets the linked_node_id of this ModelFlowChartNodeComponent.


        :param linked_node_id: The linked_node_id of this ModelFlowChartNodeComponent.
        :type linked_node_id: str
        """

        self._linked_node_id = linked_node_id

    @property
    def fixed_config(self) -> object:
        """Gets the fixed_config of this ModelFlowChartNodeComponent.

        user-defined fixed config  # noqa: E501

        :return: The fixed_config of this ModelFlowChartNodeComponent.
        :rtype: object
        """
        return self._fixed_config

    @fixed_config.setter
    def fixed_config(self, fixed_config: object):
        """Sets the fixed_config of this ModelFlowChartNodeComponent.

        user-defined fixed config  # noqa: E501

        :param fixed_config: The fixed_config of this ModelFlowChartNodeComponent.
        :type fixed_config: object
        """

        self._fixed_config = fixed_config

    @property
    def component_sub_graph(self) -> ModelFlowChart:
        """Gets the component_sub_graph of this ModelFlowChartNodeComponent.


        :return: The component_sub_graph of this ModelFlowChartNodeComponent.
        :rtype: ModelFlowChart
        """
        return self._component_sub_graph

    @component_sub_graph.setter
    def component_sub_graph(self, component_sub_graph: ModelFlowChart):
        """Sets the component_sub_graph of this ModelFlowChartNodeComponent.


        :param component_sub_graph: The component_sub_graph of this ModelFlowChartNodeComponent.
        :type component_sub_graph: ModelFlowChart
        """

        self._component_sub_graph = component_sub_graph
