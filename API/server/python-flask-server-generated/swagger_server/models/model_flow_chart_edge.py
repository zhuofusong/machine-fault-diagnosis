# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ModelFlowChartEdge(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, fixed_config: str=None, linked_nodes: List[object]=None, scripts: str=None):  # noqa: E501
        """ModelFlowChartEdge - a model defined in Swagger

        :param id: The id of this ModelFlowChartEdge.  # noqa: E501
        :type id: str
        :param fixed_config: The fixed_config of this ModelFlowChartEdge.  # noqa: E501
        :type fixed_config: str
        :param linked_nodes: The linked_nodes of this ModelFlowChartEdge.  # noqa: E501
        :type linked_nodes: List[object]
        :param scripts: The scripts of this ModelFlowChartEdge.  # noqa: E501
        :type scripts: str
        """
        self.swagger_types = {
            'id': str,
            'fixed_config': str,
            'linked_nodes': List[object],
            'scripts': str
        }

        self.attribute_map = {
            'id': 'id',
            'fixed_config': 'fixed_config',
            'linked_nodes': 'linked_nodes',
            'scripts': 'scripts'
        }
        self._id = id
        self._fixed_config = fixed_config
        self._linked_nodes = linked_nodes
        self._scripts = scripts

    @classmethod
    def from_dict(cls, dikt) -> 'ModelFlowChartEdge':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The modelFlowChartEdge of this ModelFlowChartEdge.  # noqa: E501
        :rtype: ModelFlowChartEdge
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this ModelFlowChartEdge.


        :return: The id of this ModelFlowChartEdge.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ModelFlowChartEdge.


        :param id: The id of this ModelFlowChartEdge.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def fixed_config(self) -> str:
        """Gets the fixed_config of this ModelFlowChartEdge.

        user-defined fixed configurations  # noqa: E501

        :return: The fixed_config of this ModelFlowChartEdge.
        :rtype: str
        """
        return self._fixed_config

    @fixed_config.setter
    def fixed_config(self, fixed_config: str):
        """Sets the fixed_config of this ModelFlowChartEdge.

        user-defined fixed configurations  # noqa: E501

        :param fixed_config: The fixed_config of this ModelFlowChartEdge.
        :type fixed_config: str
        """

        self._fixed_config = fixed_config

    @property
    def linked_nodes(self) -> List[object]:
        """Gets the linked_nodes of this ModelFlowChartEdge.


        :return: The linked_nodes of this ModelFlowChartEdge.
        :rtype: List[object]
        """
        return self._linked_nodes

    @linked_nodes.setter
    def linked_nodes(self, linked_nodes: List[object]):
        """Sets the linked_nodes of this ModelFlowChartEdge.


        :param linked_nodes: The linked_nodes of this ModelFlowChartEdge.
        :type linked_nodes: List[object]
        """

        self._linked_nodes = linked_nodes

    @property
    def scripts(self) -> str:
        """Gets the scripts of this ModelFlowChartEdge.

        the address in DB where it is stored  # noqa: E501

        :return: The scripts of this ModelFlowChartEdge.
        :rtype: str
        """
        return self._scripts

    @scripts.setter
    def scripts(self, scripts: str):
        """Sets the scripts of this ModelFlowChartEdge.

        the address in DB where it is stored  # noqa: E501

        :param scripts: The scripts of this ModelFlowChartEdge.
        :type scripts: str
        """

        self._scripts = scripts
