# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.model_flow_chart_extension_fixed_config import ModelFlowChartExtensionFixedConfig  # noqa: F401,E501
from swagger_server import util


class ModelFlowChartExtension(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, fixed_config: ModelFlowChartExtensionFixedConfig=None, install_script: str=None, start_script: str=None):  # noqa: E501
        """ModelFlowChartExtension - a model defined in Swagger

        :param id: The id of this ModelFlowChartExtension.  # noqa: E501
        :type id: str
        :param fixed_config: The fixed_config of this ModelFlowChartExtension.  # noqa: E501
        :type fixed_config: ModelFlowChartExtensionFixedConfig
        :param install_script: The install_script of this ModelFlowChartExtension.  # noqa: E501
        :type install_script: str
        :param start_script: The start_script of this ModelFlowChartExtension.  # noqa: E501
        :type start_script: str
        """
        self.swagger_types = {
            'id': str,
            'fixed_config': ModelFlowChartExtensionFixedConfig,
            'install_script': str,
            'start_script': str
        }

        self.attribute_map = {
            'id': 'id',
            'fixed_config': 'fixed_config',
            'install_script': 'install_script',
            'start_script': 'start_script'
        }
        self._id = id
        self._fixed_config = fixed_config
        self._install_script = install_script
        self._start_script = start_script

    @classmethod
    def from_dict(cls, dikt) -> 'ModelFlowChartExtension':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The modelFlowChartExtension of this ModelFlowChartExtension.  # noqa: E501
        :rtype: ModelFlowChartExtension
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this ModelFlowChartExtension.


        :return: The id of this ModelFlowChartExtension.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ModelFlowChartExtension.


        :param id: The id of this ModelFlowChartExtension.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def fixed_config(self) -> ModelFlowChartExtensionFixedConfig:
        """Gets the fixed_config of this ModelFlowChartExtension.


        :return: The fixed_config of this ModelFlowChartExtension.
        :rtype: ModelFlowChartExtensionFixedConfig
        """
        return self._fixed_config

    @fixed_config.setter
    def fixed_config(self, fixed_config: ModelFlowChartExtensionFixedConfig):
        """Sets the fixed_config of this ModelFlowChartExtension.


        :param fixed_config: The fixed_config of this ModelFlowChartExtension.
        :type fixed_config: ModelFlowChartExtensionFixedConfig
        """

        self._fixed_config = fixed_config

    @property
    def install_script(self) -> str:
        """Gets the install_script of this ModelFlowChartExtension.

        the address in DB where the installation script is stored  # noqa: E501

        :return: The install_script of this ModelFlowChartExtension.
        :rtype: str
        """
        return self._install_script

    @install_script.setter
    def install_script(self, install_script: str):
        """Sets the install_script of this ModelFlowChartExtension.

        the address in DB where the installation script is stored  # noqa: E501

        :param install_script: The install_script of this ModelFlowChartExtension.
        :type install_script: str
        """

        self._install_script = install_script

    @property
    def start_script(self) -> str:
        """Gets the start_script of this ModelFlowChartExtension.

        where to retrieve the extension starting script  # noqa: E501

        :return: The start_script of this ModelFlowChartExtension.
        :rtype: str
        """
        return self._start_script

    @start_script.setter
    def start_script(self, start_script: str):
        """Sets the start_script of this ModelFlowChartExtension.

        where to retrieve the extension starting script  # noqa: E501

        :param start_script: The start_script of this ModelFlowChartExtension.
        :type start_script: str
        """

        self._start_script = start_script
