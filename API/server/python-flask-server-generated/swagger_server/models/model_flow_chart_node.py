# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.model_flow_chart_node_linked_edges import ModelFlowChartNodeLinkedEdges  # noqa: F401,E501
from swagger_server import util


class ModelFlowChartNode(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, fixed_config: object=None, linked_edges: List[ModelFlowChartNodeLinkedEdges]=None, contained_components_id: str=None, scripts: str=None):  # noqa: E501
        """ModelFlowChartNode - a model defined in Swagger

        :param id: The id of this ModelFlowChartNode.  # noqa: E501
        :type id: str
        :param fixed_config: The fixed_config of this ModelFlowChartNode.  # noqa: E501
        :type fixed_config: object
        :param linked_edges: The linked_edges of this ModelFlowChartNode.  # noqa: E501
        :type linked_edges: List[ModelFlowChartNodeLinkedEdges]
        :param contained_components_id: The contained_components_id of this ModelFlowChartNode.  # noqa: E501
        :type contained_components_id: str
        :param scripts: The scripts of this ModelFlowChartNode.  # noqa: E501
        :type scripts: str
        """
        self.swagger_types = {
            'id': str,
            'fixed_config': object,
            'linked_edges': List[ModelFlowChartNodeLinkedEdges],
            'contained_components_id': str,
            'scripts': str
        }

        self.attribute_map = {
            'id': 'id',
            'fixed_config': 'fixed_config',
            'linked_edges': 'linked_edges',
            'contained_components_id': 'contained_components_id',
            'scripts': 'scripts'
        }
        self._id = id
        self._fixed_config = fixed_config
        self._linked_edges = linked_edges
        self._contained_components_id = contained_components_id
        self._scripts = scripts

    @classmethod
    def from_dict(cls, dikt) -> 'ModelFlowChartNode':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The modelFlowChartNode of this ModelFlowChartNode.  # noqa: E501
        :rtype: ModelFlowChartNode
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this ModelFlowChartNode.


        :return: The id of this ModelFlowChartNode.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ModelFlowChartNode.


        :param id: The id of this ModelFlowChartNode.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def fixed_config(self) -> object:
        """Gets the fixed_config of this ModelFlowChartNode.

        user-defined fixed config  # noqa: E501

        :return: The fixed_config of this ModelFlowChartNode.
        :rtype: object
        """
        return self._fixed_config

    @fixed_config.setter
    def fixed_config(self, fixed_config: object):
        """Sets the fixed_config of this ModelFlowChartNode.

        user-defined fixed config  # noqa: E501

        :param fixed_config: The fixed_config of this ModelFlowChartNode.
        :type fixed_config: object
        """

        self._fixed_config = fixed_config

    @property
    def linked_edges(self) -> List[ModelFlowChartNodeLinkedEdges]:
        """Gets the linked_edges of this ModelFlowChartNode.

        all incoming and outgoing edges  # noqa: E501

        :return: The linked_edges of this ModelFlowChartNode.
        :rtype: List[ModelFlowChartNodeLinkedEdges]
        """
        return self._linked_edges

    @linked_edges.setter
    def linked_edges(self, linked_edges: List[ModelFlowChartNodeLinkedEdges]):
        """Sets the linked_edges of this ModelFlowChartNode.

        all incoming and outgoing edges  # noqa: E501

        :param linked_edges: The linked_edges of this ModelFlowChartNode.
        :type linked_edges: List[ModelFlowChartNodeLinkedEdges]
        """

        self._linked_edges = linked_edges

    @property
    def contained_components_id(self) -> str:
        """Gets the contained_components_id of this ModelFlowChartNode.

        the id of the corresponding node components  # noqa: E501

        :return: The contained_components_id of this ModelFlowChartNode.
        :rtype: str
        """
        return self._contained_components_id

    @contained_components_id.setter
    def contained_components_id(self, contained_components_id: str):
        """Sets the contained_components_id of this ModelFlowChartNode.

        the id of the corresponding node components  # noqa: E501

        :param contained_components_id: The contained_components_id of this ModelFlowChartNode.
        :type contained_components_id: str
        """

        self._contained_components_id = contained_components_id

    @property
    def scripts(self) -> str:
        """Gets the scripts of this ModelFlowChartNode.

        location in DB for retrieval of this node's scripts  # noqa: E501

        :return: The scripts of this ModelFlowChartNode.
        :rtype: str
        """
        return self._scripts

    @scripts.setter
    def scripts(self, scripts: str):
        """Sets the scripts of this ModelFlowChartNode.

        location in DB for retrieval of this node's scripts  # noqa: E501

        :param scripts: The scripts of this ModelFlowChartNode.
        :type scripts: str
        """

        self._scripts = scripts
