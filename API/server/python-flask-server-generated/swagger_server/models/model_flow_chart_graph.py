# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.model_flow_chart_edge_meta import ModelFlowChartEdgeMeta  # noqa: F401,E501
from swagger_server.models.model_flow_chart_extension_meta import ModelFlowChartExtensionMeta  # noqa: F401,E501
from swagger_server.models.model_flow_chart_node_component_meta import ModelFlowChartNodeComponentMeta  # noqa: F401,E501
from swagger_server.models.model_flow_chart_node_meta import ModelFlowChartNodeMeta  # noqa: F401,E501
from swagger_server import util


class ModelFlowChartGraph(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, nodes: List[ModelFlowChartNodeMeta]=None, node_components: List[ModelFlowChartNodeComponentMeta]=None, edges: List[ModelFlowChartEdgeMeta]=None, extensions: List[ModelFlowChartExtensionMeta]=None):  # noqa: E501
        """ModelFlowChartGraph - a model defined in Swagger

        :param nodes: The nodes of this ModelFlowChartGraph.  # noqa: E501
        :type nodes: List[ModelFlowChartNodeMeta]
        :param node_components: The node_components of this ModelFlowChartGraph.  # noqa: E501
        :type node_components: List[ModelFlowChartNodeComponentMeta]
        :param edges: The edges of this ModelFlowChartGraph.  # noqa: E501
        :type edges: List[ModelFlowChartEdgeMeta]
        :param extensions: The extensions of this ModelFlowChartGraph.  # noqa: E501
        :type extensions: List[ModelFlowChartExtensionMeta]
        """
        self.swagger_types = {
            'nodes': List[ModelFlowChartNodeMeta],
            'node_components': List[ModelFlowChartNodeComponentMeta],
            'edges': List[ModelFlowChartEdgeMeta],
            'extensions': List[ModelFlowChartExtensionMeta]
        }

        self.attribute_map = {
            'nodes': 'nodes',
            'node_components': 'node_components',
            'edges': 'edges',
            'extensions': 'extensions'
        }
        self._nodes = nodes
        self._node_components = node_components
        self._edges = edges
        self._extensions = extensions

    @classmethod
    def from_dict(cls, dikt) -> 'ModelFlowChartGraph':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The modelFlowChart_graph of this ModelFlowChartGraph.  # noqa: E501
        :rtype: ModelFlowChartGraph
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nodes(self) -> List[ModelFlowChartNodeMeta]:
        """Gets the nodes of this ModelFlowChartGraph.


        :return: The nodes of this ModelFlowChartGraph.
        :rtype: List[ModelFlowChartNodeMeta]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes: List[ModelFlowChartNodeMeta]):
        """Sets the nodes of this ModelFlowChartGraph.


        :param nodes: The nodes of this ModelFlowChartGraph.
        :type nodes: List[ModelFlowChartNodeMeta]
        """
        if nodes is None:
            raise ValueError("Invalid value for `nodes`, must not be `None`")  # noqa: E501

        self._nodes = nodes

    @property
    def node_components(self) -> List[ModelFlowChartNodeComponentMeta]:
        """Gets the node_components of this ModelFlowChartGraph.


        :return: The node_components of this ModelFlowChartGraph.
        :rtype: List[ModelFlowChartNodeComponentMeta]
        """
        return self._node_components

    @node_components.setter
    def node_components(self, node_components: List[ModelFlowChartNodeComponentMeta]):
        """Sets the node_components of this ModelFlowChartGraph.


        :param node_components: The node_components of this ModelFlowChartGraph.
        :type node_components: List[ModelFlowChartNodeComponentMeta]
        """

        self._node_components = node_components

    @property
    def edges(self) -> List[ModelFlowChartEdgeMeta]:
        """Gets the edges of this ModelFlowChartGraph.


        :return: The edges of this ModelFlowChartGraph.
        :rtype: List[ModelFlowChartEdgeMeta]
        """
        return self._edges

    @edges.setter
    def edges(self, edges: List[ModelFlowChartEdgeMeta]):
        """Sets the edges of this ModelFlowChartGraph.


        :param edges: The edges of this ModelFlowChartGraph.
        :type edges: List[ModelFlowChartEdgeMeta]
        """
        if edges is None:
            raise ValueError("Invalid value for `edges`, must not be `None`")  # noqa: E501

        self._edges = edges

    @property
    def extensions(self) -> List[ModelFlowChartExtensionMeta]:
        """Gets the extensions of this ModelFlowChartGraph.


        :return: The extensions of this ModelFlowChartGraph.
        :rtype: List[ModelFlowChartExtensionMeta]
        """
        return self._extensions

    @extensions.setter
    def extensions(self, extensions: List[ModelFlowChartExtensionMeta]):
        """Sets the extensions of this ModelFlowChartGraph.


        :param extensions: The extensions of this ModelFlowChartGraph.
        :type extensions: List[ModelFlowChartExtensionMeta]
        """

        self._extensions = extensions
