/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.ModelFlowChart;
import io.swagger.model.ModelFlowChartEdgeMeta;
import io.swagger.model.ModelFlowChartExtensionMeta;
import io.swagger.model.ModelFlowChartMeta;
import io.swagger.model.ModelFlowChartNodeComponentMeta;
import io.swagger.model.ModelFlowChartNodeMeta;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-04-16T08:57:06.645Z[GMT]")
@Api(value = "modelFlow", description = "the modelFlow API")
public interface ModelFlowApi {

    @ApiOperation(value = "delete a list of model flow charts", nickname = "modelFlowDelete", notes = "delete a list of model flow charts", response = Object.class, authorizations = {
        @Authorization(value = "application", scopes = { 
            @AuthorizationScope(scope = "write", description = "allows modifying resources"),
            @AuthorizationScope(scope = "read", description = "allows reading resources")
            })    }, tags={ "model flow", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "the list of model flow charts deleted", response = Object.class),
        @ApiResponse(code = 400, message = "input is invalid"),
        @ApiResponse(code = 404, message = "No model flow chart satisfies the search criteria"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/modelFlow",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Object> modelFlowDelete(@ApiParam(value = "the string for searching for model flow charts") @Valid @RequestParam(value = "modelFlowSearchString", required = false) String modelFlowSearchString
);


    @ApiOperation(value = "get a list of all model flow charts", nickname = "modelFlowGet", notes = "Get a list of all model flow charts", response = ModelFlowChartMeta.class, responseContainer = "List", authorizations = {
        @Authorization(value = "application", scopes = { 
            @AuthorizationScope(scope = "write", description = "allows modifying resources"),
            @AuthorizationScope(scope = "read", description = "allows reading resources")
            })    }, tags={ "model flow", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "a list of model flow charts returned", response = ModelFlowChartMeta.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "input is invalid"),
        @ApiResponse(code = 404, message = "No model flow chart satisfies the search criteria"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/modelFlow",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ModelFlowChartMeta>> modelFlowGet(@ApiParam(value = "the string for searching for model flow charts") @Valid @RequestParam(value = "modelFlowSearchString", required = false) String modelFlowSearchString
);


    @ApiOperation(value = "delete a model flow chart", nickname = "modelFlowModelFlowIdDelete", notes = "delete a model flow chart", response = Object.class, authorizations = {
        @Authorization(value = "application", scopes = { 
            @AuthorizationScope(scope = "write", description = "allows modifying resources"),
            @AuthorizationScope(scope = "read", description = "allows reading resources")
            })    }, tags={ "model flow chart", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "deleted a model flow chart", response = Object.class),
        @ApiResponse(code = 400, message = "input is invalid"),
        @ApiResponse(code = 404, message = "no model flow chart satisfies the search criteria"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/modelFlow/{modelFlowId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Object> modelFlowModelFlowIdDelete(@ApiParam(value = "model flow chart id",required=true) @PathVariable("modelFlowId") String modelFlowId
);


    @ApiOperation(value = "delete a model flow chart extension", nickname = "modelFlowModelFlowIdExtensionDelete", notes = "delete a model flow chart extension", response = Object.class, authorizations = {
        @Authorization(value = "application", scopes = { 
            @AuthorizationScope(scope = "write", description = "allows modifying resources"),
            @AuthorizationScope(scope = "read", description = "allows reading resources")
            })    }, tags={ "model flow chart extension", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "deleted a model flow chart extension", response = Object.class),
        @ApiResponse(code = 400, message = "input is invalid"),
        @ApiResponse(code = 404, message = "no model flow chart found"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/modelFlow/{modelFlowId}/extension",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Object> modelFlowModelFlowIdExtensionDelete(@ApiParam(value = "model flow chart id",required=true) @PathVariable("modelFlowId") String modelFlowId
);


    @ApiOperation(value = "retrieve a model flow chart extension", nickname = "modelFlowModelFlowIdExtensionGet", notes = "retrieve a model flow chart extension", response = ModelFlowChartExtensionMeta.class, responseContainer = "List", authorizations = {
        @Authorization(value = "application", scopes = { 
            @AuthorizationScope(scope = "write", description = "allows modifying resources"),
            @AuthorizationScope(scope = "read", description = "allows reading resources")
            })    }, tags={ "model flow chart extension", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "model flow chart returned", response = ModelFlowChartExtensionMeta.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "input is invalid"),
        @ApiResponse(code = 404, message = "no model flow chart extension found"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/modelFlow/{modelFlowId}/extension",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ModelFlowChartExtensionMeta>> modelFlowModelFlowIdExtensionGet(@ApiParam(value = "model flow chart id",required=true) @PathVariable("modelFlowId") String modelFlowId
);


    @ApiOperation(value = "create a model flow chart extension", nickname = "modelFlowModelFlowIdExtensionPost", notes = "create a model flow chart extension", response = Object.class, authorizations = {
        @Authorization(value = "application", scopes = { 
            @AuthorizationScope(scope = "write", description = "allows modifying resources"),
            @AuthorizationScope(scope = "read", description = "allows reading resources")
            })    }, tags={ "model flow chart extension", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "model flow chart extension successfully created", response = Object.class),
        @ApiResponse(code = 400, message = "invalid model flow chart extension input"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/modelFlow/{modelFlowId}/extension",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Object> modelFlowModelFlowIdExtensionPost(@ApiParam(value = "model flow chart id",required=true) @PathVariable("modelFlowId") String modelFlowId
,@NotNull @ApiParam(value = "model flow chart extension", required = true) @Valid @RequestParam(value = "modelFlowChartExtension", required = true) ModelFlowChartExtensionMeta modelFlowChartExtension
);


    @ApiOperation(value = "update a model flow chart extension", nickname = "modelFlowModelFlowIdExtensionPut", notes = "update a model flow chart extension", response = Object.class, authorizations = {
        @Authorization(value = "application", scopes = { 
            @AuthorizationScope(scope = "write", description = "allows modifying resources"),
            @AuthorizationScope(scope = "read", description = "allows reading resources")
            })    }, tags={ "model flow chart extension", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "model flow chart successfully updated", response = Object.class),
        @ApiResponse(code = 400, message = "invalid model flow chart extension input"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/modelFlow/{modelFlowId}/extension",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Object> modelFlowModelFlowIdExtensionPut(@ApiParam(value = "model flow chart id",required=true) @PathVariable("modelFlowId") String modelFlowId
,@NotNull @ApiParam(value = "model flow chart extension", required = true) @Valid @RequestParam(value = "modelFlowChartExtension", required = true) ModelFlowChartExtensionMeta modelFlowChartExtension
);


    @ApiOperation(value = "retrieve a model flow chart", nickname = "modelFlowModelFlowIdGet", notes = "retrieve a model flow chart", response = ModelFlowChartMeta.class, responseContainer = "List", authorizations = {
        @Authorization(value = "application", scopes = { 
            @AuthorizationScope(scope = "write", description = "allows modifying resources"),
            @AuthorizationScope(scope = "read", description = "allows reading resources")
            })    }, tags={ "model flow chart", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "model flow chart returned", response = ModelFlowChartMeta.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "input is invalid"),
        @ApiResponse(code = 404, message = "no model flow chart satisfies the search criteria"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/modelFlow/{modelFlowId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ModelFlowChartMeta>> modelFlowModelFlowIdGet(@ApiParam(value = "model flow chart id",required=true) @PathVariable("modelFlowId") String modelFlowId
);


    @ApiOperation(value = "create a model flow chart", nickname = "modelFlowModelFlowIdPost", notes = "create a model flow chart", response = Object.class, authorizations = {
        @Authorization(value = "application", scopes = { 
            @AuthorizationScope(scope = "write", description = "allows modifying resources"),
            @AuthorizationScope(scope = "read", description = "allows reading resources")
            })    }, tags={ "model flow chart", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "model flow chart successfully created", response = Object.class),
        @ApiResponse(code = 400, message = "invalid model flow chart input"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/modelFlow/{modelFlowId}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Object> modelFlowModelFlowIdPost(@ApiParam(value = "model flow chart id",required=true) @PathVariable("modelFlowId") String modelFlowId
,@NotNull @ApiParam(value = "model flow chart", required = true) @Valid @RequestParam(value = "modelFlowChart", required = true) ModelFlowChart modelFlowChart
);


    @ApiOperation(value = "update a model flow chart", nickname = "modelFlowModelFlowIdPut", notes = "update a model flow chart", response = Object.class, authorizations = {
        @Authorization(value = "application", scopes = { 
            @AuthorizationScope(scope = "write", description = "allows modifying resources"),
            @AuthorizationScope(scope = "read", description = "allows reading resources")
            })    }, tags={ "model flow chart", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "model flow chart successfully created", response = Object.class),
        @ApiResponse(code = 400, message = "invalid model flow chart input"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/modelFlow/{modelFlowId}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Object> modelFlowModelFlowIdPut(@ApiParam(value = "model flow chart id",required=true) @PathVariable("modelFlowId") String modelFlowId
,@NotNull @ApiParam(value = "model flow chart", required = true) @Valid @RequestParam(value = "modelFlowChart", required = true) ModelFlowChart modelFlowChart
);


    @ApiOperation(value = "delete an edge's information in a model flow chart", nickname = "modelFlowNodeModelFlowIdEdgeIdDelete", notes = "delete an edge's information in a model flow chart", response = Object.class, authorizations = {
        @Authorization(value = "application", scopes = { 
            @AuthorizationScope(scope = "write", description = "allows modifying resources"),
            @AuthorizationScope(scope = "read", description = "allows reading resources")
            })    }, tags={ "model flow chart edge", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "edge deleted", response = Object.class),
        @ApiResponse(code = 400, message = "input is invalid"),
        @ApiResponse(code = 404, message = "model flow chart edge not found"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/modelFlow/node/{modelFlowId}/{edgeId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Object> modelFlowNodeModelFlowIdEdgeIdDelete(@ApiParam(value = "model flow chart id",required=true) @PathVariable("modelFlowId") String modelFlowId
,@ApiParam(value = "edge's id in a model flow chart",required=true) @PathVariable("edgeId") String edgeId
);


    @ApiOperation(value = "retrieve an edge's information in a model flow chart", nickname = "modelFlowNodeModelFlowIdEdgeIdGet", notes = "retrieve an edge's information in a model flow chart", response = ModelFlowChartEdgeMeta.class, responseContainer = "List", authorizations = {
        @Authorization(value = "application", scopes = { 
            @AuthorizationScope(scope = "write", description = "allows modifying resources"),
            @AuthorizationScope(scope = "read", description = "allows reading resources")
            })    }, tags={ "model flow chart edge", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "edge returned", response = ModelFlowChartEdgeMeta.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "input is invalid"),
        @ApiResponse(code = 404, message = "model flow chart edge not found"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/modelFlow/node/{modelFlowId}/{edgeId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ModelFlowChartEdgeMeta>> modelFlowNodeModelFlowIdEdgeIdGet(@ApiParam(value = "model flow chart id",required=true) @PathVariable("modelFlowId") String modelFlowId
,@ApiParam(value = "edge's id in a model flow chart",required=true) @PathVariable("edgeId") String edgeId
);


    @ApiOperation(value = "create an edge's information in a model flow chart", nickname = "modelFlowNodeModelFlowIdEdgeIdPost", notes = "create an edge's information in a model flow chart", response = ModelFlowChartEdgeMeta.class, responseContainer = "List", authorizations = {
        @Authorization(value = "application", scopes = { 
            @AuthorizationScope(scope = "write", description = "allows modifying resources"),
            @AuthorizationScope(scope = "read", description = "allows reading resources")
            })    }, tags={ "model flow chart edge", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "edge created", response = ModelFlowChartEdgeMeta.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "input is invalid"),
        @ApiResponse(code = 404, message = "model flow chart not found. create one first."),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/modelFlow/node/{modelFlowId}/{edgeId}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<List<ModelFlowChartEdgeMeta>> modelFlowNodeModelFlowIdEdgeIdPost(@ApiParam(value = "model flow chart id",required=true) @PathVariable("modelFlowId") String modelFlowId
,@ApiParam(value = "edge's id in a model flow chart",required=true) @PathVariable("edgeId") String edgeId
);


    @ApiOperation(value = "update an edge's information in a model flow chart", nickname = "modelFlowNodeModelFlowIdEdgeIdPut", notes = "update an edge's information in a model flow chart", response = ModelFlowChartEdgeMeta.class, responseContainer = "List", authorizations = {
        @Authorization(value = "application", scopes = { 
            @AuthorizationScope(scope = "write", description = "allows modifying resources"),
            @AuthorizationScope(scope = "read", description = "allows reading resources")
            })    }, tags={ "model flow chart edge", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "edge updated", response = ModelFlowChartEdgeMeta.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "input is invalid"),
        @ApiResponse(code = 404, message = "model flow chart not found. create one first."),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/modelFlow/node/{modelFlowId}/{edgeId}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<List<ModelFlowChartEdgeMeta>> modelFlowNodeModelFlowIdEdgeIdPut(@ApiParam(value = "model flow chart id",required=true) @PathVariable("modelFlowId") String modelFlowId
,@ApiParam(value = "edge's id in a model flow chart",required=true) @PathVariable("edgeId") String edgeId
);


    @ApiOperation(value = "delete a node's components information in a model flow chart", nickname = "modelFlowNodeModelFlowIdNodeIdComponentDelete", notes = "delete a node's components information in a model flow chart", response = Object.class, authorizations = {
        @Authorization(value = "application", scopes = { 
            @AuthorizationScope(scope = "write", description = "allows modifying resources"),
            @AuthorizationScope(scope = "read", description = "allows reading resources")
            })    }, tags={ "model flow chart node component", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "all components deleted", response = Object.class),
        @ApiResponse(code = 400, message = "input is invalid"),
        @ApiResponse(code = 404, message = "model flow chart node component not found"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/modelFlow/node/{modelFlowId}/{nodeId}/component",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Object> modelFlowNodeModelFlowIdNodeIdComponentDelete(@ApiParam(value = "model flow chart id",required=true) @PathVariable("modelFlowId") String modelFlowId
,@ApiParam(value = "node's id in a model flow chart",required=true) @PathVariable("nodeId") String nodeId
);


    @ApiOperation(value = "retrieve a node's components information in a model flow chart", nickname = "modelFlowNodeModelFlowIdNodeIdComponentGet", notes = "retrieve a node's components information in a model flow chart", response = ModelFlowChartNodeComponentMeta.class, responseContainer = "List", authorizations = {
        @Authorization(value = "application", scopes = { 
            @AuthorizationScope(scope = "write", description = "allows modifying resources"),
            @AuthorizationScope(scope = "read", description = "allows reading resources")
            })    }, tags={ "model flow chart node component", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "components returned", response = ModelFlowChartNodeComponentMeta.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "input is invalid"),
        @ApiResponse(code = 404, message = "model flow chart node component not found"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/modelFlow/node/{modelFlowId}/{nodeId}/component",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ModelFlowChartNodeComponentMeta>> modelFlowNodeModelFlowIdNodeIdComponentGet(@ApiParam(value = "model flow chart id",required=true) @PathVariable("modelFlowId") String modelFlowId
,@ApiParam(value = "node's id in a model flow chart",required=true) @PathVariable("nodeId") String nodeId
);


    @ApiOperation(value = "create a node's components information in a model flow chart", nickname = "modelFlowNodeModelFlowIdNodeIdComponentPost", notes = "create a node's information in a model flow chart", response = ModelFlowChartNodeComponentMeta.class, responseContainer = "List", authorizations = {
        @Authorization(value = "application", scopes = { 
            @AuthorizationScope(scope = "write", description = "allows modifying resources"),
            @AuthorizationScope(scope = "read", description = "allows reading resources")
            })    }, tags={ "model flow chart node component", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "node component created", response = ModelFlowChartNodeComponentMeta.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "input is invalid"),
        @ApiResponse(code = 404, message = "model flow chart not found. create one first."),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/modelFlow/node/{modelFlowId}/{nodeId}/component",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<List<ModelFlowChartNodeComponentMeta>> modelFlowNodeModelFlowIdNodeIdComponentPost(@ApiParam(value = "model flow chart id",required=true) @PathVariable("modelFlowId") String modelFlowId
,@ApiParam(value = "node's id in a model flow chart",required=true) @PathVariable("nodeId") String nodeId
);


    @ApiOperation(value = "update a node's components information in a model flow chart", nickname = "modelFlowNodeModelFlowIdNodeIdComponentPut", notes = "update a node's information in a model flow chart", response = ModelFlowChartNodeComponentMeta.class, responseContainer = "List", authorizations = {
        @Authorization(value = "application", scopes = { 
            @AuthorizationScope(scope = "write", description = "allows modifying resources"),
            @AuthorizationScope(scope = "read", description = "allows reading resources")
            })    }, tags={ "model flow chart node component", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "node component created", response = ModelFlowChartNodeComponentMeta.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "input is invalid"),
        @ApiResponse(code = 404, message = "model flow chart not found. create one first."),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/modelFlow/node/{modelFlowId}/{nodeId}/component",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<List<ModelFlowChartNodeComponentMeta>> modelFlowNodeModelFlowIdNodeIdComponentPut(@ApiParam(value = "model flow chart id",required=true) @PathVariable("modelFlowId") String modelFlowId
,@ApiParam(value = "node's id in a model flow chart",required=true) @PathVariable("nodeId") String nodeId
);


    @ApiOperation(value = "delete a node's information in a model flow chart", nickname = "modelFlowNodeModelFlowIdNodeIdDelete", notes = "delete a node's information in a model flow chart", response = Object.class, authorizations = {
        @Authorization(value = "application", scopes = { 
            @AuthorizationScope(scope = "write", description = "allows modifying resources"),
            @AuthorizationScope(scope = "read", description = "allows reading resources")
            })    }, tags={ "model flow chart node", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "node deleted", response = Object.class),
        @ApiResponse(code = 400, message = "input is invalid"),
        @ApiResponse(code = 404, message = "model flow chart node not found"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/modelFlow/node/{modelFlowId}/{nodeId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Object> modelFlowNodeModelFlowIdNodeIdDelete(@ApiParam(value = "model flow chart id",required=true) @PathVariable("modelFlowId") String modelFlowId
,@ApiParam(value = "node's id in a model flow chart",required=true) @PathVariable("nodeId") String nodeId
);


    @ApiOperation(value = "retrieve a node's information in a model flow chart", nickname = "modelFlowNodeModelFlowIdNodeIdGet", notes = "retrieve a node's information in a model flow chart", response = ModelFlowChartNodeMeta.class, responseContainer = "List", authorizations = {
        @Authorization(value = "application", scopes = { 
            @AuthorizationScope(scope = "write", description = "allows modifying resources"),
            @AuthorizationScope(scope = "read", description = "allows reading resources")
            })    }, tags={ "model flow chart node", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "node returned", response = ModelFlowChartNodeMeta.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "input is invalid"),
        @ApiResponse(code = 404, message = "model flow chart node not found"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/modelFlow/node/{modelFlowId}/{nodeId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<ModelFlowChartNodeMeta>> modelFlowNodeModelFlowIdNodeIdGet(@ApiParam(value = "model flow chart id",required=true) @PathVariable("modelFlowId") String modelFlowId
,@ApiParam(value = "node's id in a model flow chart",required=true) @PathVariable("nodeId") String nodeId
);


    @ApiOperation(value = "create a node's information in a model flow chart", nickname = "modelFlowNodeModelFlowIdNodeIdPost", notes = "create a node's information in a model flow chart", response = ModelFlowChartNodeMeta.class, responseContainer = "List", authorizations = {
        @Authorization(value = "application", scopes = { 
            @AuthorizationScope(scope = "write", description = "allows modifying resources"),
            @AuthorizationScope(scope = "read", description = "allows reading resources")
            })    }, tags={ "model flow chart node", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "node created", response = ModelFlowChartNodeMeta.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "input is invalid"),
        @ApiResponse(code = 404, message = "model flow chart not found. create one first."),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/modelFlow/node/{modelFlowId}/{nodeId}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<List<ModelFlowChartNodeMeta>> modelFlowNodeModelFlowIdNodeIdPost(@ApiParam(value = "model flow chart id",required=true) @PathVariable("modelFlowId") String modelFlowId
,@ApiParam(value = "node's id in a model flow chart",required=true) @PathVariable("nodeId") String nodeId
);


    @ApiOperation(value = "update a node's information in a model flow chart", nickname = "modelFlowNodeModelFlowIdNodeIdPut", notes = "update a node's information in a model flow chart", response = ModelFlowChartNodeMeta.class, responseContainer = "List", authorizations = {
        @Authorization(value = "application", scopes = { 
            @AuthorizationScope(scope = "write", description = "allows modifying resources"),
            @AuthorizationScope(scope = "read", description = "allows reading resources")
            })    }, tags={ "model flow chart node", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "node updated", response = ModelFlowChartNodeMeta.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "input is invalid"),
        @ApiResponse(code = 404, message = "model flow chart not found. create one first."),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/modelFlow/node/{modelFlowId}/{nodeId}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<List<ModelFlowChartNodeMeta>> modelFlowNodeModelFlowIdNodeIdPut(@ApiParam(value = "model flow chart id",required=true) @PathVariable("modelFlowId") String modelFlowId
,@ApiParam(value = "node's id in a model flow chart",required=true) @PathVariable("nodeId") String nodeId
);


    @ApiOperation(value = "validation of all kinds of objects", nickname = "modelFlowValidationKindIdPost", notes = "validation of all kinds of objects", response = Object.class, authorizations = {
        @Authorization(value = "application", scopes = { 
            @AuthorizationScope(scope = "write", description = "allows modifying resources"),
            @AuthorizationScope(scope = "read", description = "allows reading resources")
            })    }, tags={ "model flow chart validation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "passed validation", response = Object.class),
        @ApiResponse(code = 400, message = "object is not valid"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/modelFlow/validation/{kind}/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Object> modelFlowValidationKindIdPost(@ApiParam(value = "what kind of object to validate",required=true) @PathVariable("kind") String kind
,@ApiParam(value = "id of the object to be validated",required=true) @PathVariable("id") String id
);

}
