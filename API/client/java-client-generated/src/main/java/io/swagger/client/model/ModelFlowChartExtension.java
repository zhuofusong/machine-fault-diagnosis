/*
 * Machine fault diagnosis
 * List of top level server APIs
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ModelFlowChartExtensionFixedConfig;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * ModelFlowChartExtension
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-04-16T08:54:30.701Z[GMT]")
public class ModelFlowChartExtension {
  @SerializedName("id")
  private String id = null;

  @SerializedName("fixed_config")
  private ModelFlowChartExtensionFixedConfig fixedConfig = null;

  @SerializedName("install_script")
  private String installScript = null;

  @SerializedName("start_script")
  private String startScript = null;

  public ModelFlowChartExtension id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(required = true, description = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ModelFlowChartExtension fixedConfig(ModelFlowChartExtensionFixedConfig fixedConfig) {
    this.fixedConfig = fixedConfig;
    return this;
  }

   /**
   * Get fixedConfig
   * @return fixedConfig
  **/
  @Schema(description = "")
  public ModelFlowChartExtensionFixedConfig getFixedConfig() {
    return fixedConfig;
  }

  public void setFixedConfig(ModelFlowChartExtensionFixedConfig fixedConfig) {
    this.fixedConfig = fixedConfig;
  }

  public ModelFlowChartExtension installScript(String installScript) {
    this.installScript = installScript;
    return this;
  }

   /**
   * the address in DB where the installation script is stored
   * @return installScript
  **/
  @Schema(description = "the address in DB where the installation script is stored")
  public String getInstallScript() {
    return installScript;
  }

  public void setInstallScript(String installScript) {
    this.installScript = installScript;
  }

  public ModelFlowChartExtension startScript(String startScript) {
    this.startScript = startScript;
    return this;
  }

   /**
   * where to retrieve the extension starting script
   * @return startScript
  **/
  @Schema(description = "where to retrieve the extension starting script")
  public String getStartScript() {
    return startScript;
  }

  public void setStartScript(String startScript) {
    this.startScript = startScript;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelFlowChartExtension modelFlowChartExtension = (ModelFlowChartExtension) o;
    return Objects.equals(this.id, modelFlowChartExtension.id) &&
        Objects.equals(this.fixedConfig, modelFlowChartExtension.fixedConfig) &&
        Objects.equals(this.installScript, modelFlowChartExtension.installScript) &&
        Objects.equals(this.startScript, modelFlowChartExtension.startScript);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, fixedConfig, installScript, startScript);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelFlowChartExtension {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    fixedConfig: ").append(toIndentedString(fixedConfig)).append("\n");
    sb.append("    installScript: ").append(toIndentedString(installScript)).append("\n");
    sb.append("    startScript: ").append(toIndentedString(startScript)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
