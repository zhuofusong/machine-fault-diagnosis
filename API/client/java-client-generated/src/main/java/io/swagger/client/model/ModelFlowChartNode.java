/*
 * Machine fault diagnosis
 * List of top level server APIs
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ModelFlowChartNodeLinkedEdges;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ModelFlowChartNode
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-04-16T08:54:30.701Z[GMT]")
public class ModelFlowChartNode {
  @SerializedName("id")
  private String id = null;

  @SerializedName("fixed_config")
  private Object fixedConfig = null;

  @SerializedName("linked_edges")
  private List<ModelFlowChartNodeLinkedEdges> linkedEdges = null;

  @SerializedName("contained_components_id")
  private String containedComponentsId = null;

  @SerializedName("scripts")
  private String scripts = null;

  public ModelFlowChartNode id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(required = true, description = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ModelFlowChartNode fixedConfig(Object fixedConfig) {
    this.fixedConfig = fixedConfig;
    return this;
  }

   /**
   * user-defined fixed config
   * @return fixedConfig
  **/
  @Schema(description = "user-defined fixed config")
  public Object getFixedConfig() {
    return fixedConfig;
  }

  public void setFixedConfig(Object fixedConfig) {
    this.fixedConfig = fixedConfig;
  }

  public ModelFlowChartNode linkedEdges(List<ModelFlowChartNodeLinkedEdges> linkedEdges) {
    this.linkedEdges = linkedEdges;
    return this;
  }

  public ModelFlowChartNode addLinkedEdgesItem(ModelFlowChartNodeLinkedEdges linkedEdgesItem) {
    if (this.linkedEdges == null) {
      this.linkedEdges = new ArrayList<ModelFlowChartNodeLinkedEdges>();
    }
    this.linkedEdges.add(linkedEdgesItem);
    return this;
  }

   /**
   * all incoming and outgoing edges
   * @return linkedEdges
  **/
  @Schema(description = "all incoming and outgoing edges")
  public List<ModelFlowChartNodeLinkedEdges> getLinkedEdges() {
    return linkedEdges;
  }

  public void setLinkedEdges(List<ModelFlowChartNodeLinkedEdges> linkedEdges) {
    this.linkedEdges = linkedEdges;
  }

  public ModelFlowChartNode containedComponentsId(String containedComponentsId) {
    this.containedComponentsId = containedComponentsId;
    return this;
  }

   /**
   * the id of the corresponding node components
   * @return containedComponentsId
  **/
  @Schema(description = "the id of the corresponding node components")
  public String getContainedComponentsId() {
    return containedComponentsId;
  }

  public void setContainedComponentsId(String containedComponentsId) {
    this.containedComponentsId = containedComponentsId;
  }

  public ModelFlowChartNode scripts(String scripts) {
    this.scripts = scripts;
    return this;
  }

   /**
   * location in DB for retrieval of this node&#x27;s scripts
   * @return scripts
  **/
  @Schema(description = "location in DB for retrieval of this node's scripts")
  public String getScripts() {
    return scripts;
  }

  public void setScripts(String scripts) {
    this.scripts = scripts;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelFlowChartNode modelFlowChartNode = (ModelFlowChartNode) o;
    return Objects.equals(this.id, modelFlowChartNode.id) &&
        Objects.equals(this.fixedConfig, modelFlowChartNode.fixedConfig) &&
        Objects.equals(this.linkedEdges, modelFlowChartNode.linkedEdges) &&
        Objects.equals(this.containedComponentsId, modelFlowChartNode.containedComponentsId) &&
        Objects.equals(this.scripts, modelFlowChartNode.scripts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, fixedConfig, linkedEdges, containedComponentsId, scripts);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelFlowChartNode {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    fixedConfig: ").append(toIndentedString(fixedConfig)).append("\n");
    sb.append("    linkedEdges: ").append(toIndentedString(linkedEdges)).append("\n");
    sb.append("    containedComponentsId: ").append(toIndentedString(containedComponentsId)).append("\n");
    sb.append("    scripts: ").append(toIndentedString(scripts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
