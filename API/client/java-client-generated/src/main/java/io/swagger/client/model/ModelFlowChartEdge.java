/*
 * Machine fault diagnosis
 * List of top level server APIs
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ModelFlowChartEdge
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-04-16T08:54:30.701Z[GMT]")
public class ModelFlowChartEdge {
  @SerializedName("id")
  private String id = null;

  @SerializedName("fixed_config")
  private String fixedConfig = null;

  @SerializedName("linked_nodes")
  private List<Object> linkedNodes = null;

  @SerializedName("scripts")
  private String scripts = null;

  public ModelFlowChartEdge id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(required = true, description = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public ModelFlowChartEdge fixedConfig(String fixedConfig) {
    this.fixedConfig = fixedConfig;
    return this;
  }

   /**
   * user-defined fixed configurations
   * @return fixedConfig
  **/
  @Schema(description = "user-defined fixed configurations")
  public String getFixedConfig() {
    return fixedConfig;
  }

  public void setFixedConfig(String fixedConfig) {
    this.fixedConfig = fixedConfig;
  }

  public ModelFlowChartEdge linkedNodes(List<Object> linkedNodes) {
    this.linkedNodes = linkedNodes;
    return this;
  }

  public ModelFlowChartEdge addLinkedNodesItem(Object linkedNodesItem) {
    if (this.linkedNodes == null) {
      this.linkedNodes = new ArrayList<Object>();
    }
    this.linkedNodes.add(linkedNodesItem);
    return this;
  }

   /**
   * Get linkedNodes
   * @return linkedNodes
  **/
  @Schema(description = "")
  public List<Object> getLinkedNodes() {
    return linkedNodes;
  }

  public void setLinkedNodes(List<Object> linkedNodes) {
    this.linkedNodes = linkedNodes;
  }

  public ModelFlowChartEdge scripts(String scripts) {
    this.scripts = scripts;
    return this;
  }

   /**
   * the address in DB where it is stored
   * @return scripts
  **/
  @Schema(description = "the address in DB where it is stored")
  public String getScripts() {
    return scripts;
  }

  public void setScripts(String scripts) {
    this.scripts = scripts;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelFlowChartEdge modelFlowChartEdge = (ModelFlowChartEdge) o;
    return Objects.equals(this.id, modelFlowChartEdge.id) &&
        Objects.equals(this.fixedConfig, modelFlowChartEdge.fixedConfig) &&
        Objects.equals(this.linkedNodes, modelFlowChartEdge.linkedNodes) &&
        Objects.equals(this.scripts, modelFlowChartEdge.scripts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, fixedConfig, linkedNodes, scripts);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelFlowChartEdge {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    fixedConfig: ").append(toIndentedString(fixedConfig)).append("\n");
    sb.append("    linkedNodes: ").append(toIndentedString(linkedNodes)).append("\n");
    sb.append("    scripts: ").append(toIndentedString(scripts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
