# coding: utf-8

"""
    Machine fault diagnosis

    List of top level server APIs  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ModelFlowChartMeta(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'kind': 'str',
        'created_time': 'float',
        'last_modified_time': 'float',
        'author': 'str',
        'edit_mode': 'str',
        'config': 'object',
        'comments': 'str'
    }

    attribute_map = {
        'id': 'id',
        'kind': 'kind',
        'created_time': 'createdTime',
        'last_modified_time': 'lastModifiedTime',
        'author': 'author',
        'edit_mode': 'editMode',
        'config': 'config',
        'comments': 'comments'
    }

    def __init__(self, id=None, kind=None, created_time=None, last_modified_time=None, author=None, edit_mode=None, config=None, comments=None):  # noqa: E501
        """ModelFlowChartMeta - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._kind = None
        self._created_time = None
        self._last_modified_time = None
        self._author = None
        self._edit_mode = None
        self._config = None
        self._comments = None
        self.discriminator = None
        self.id = id
        self.kind = kind
        if created_time is not None:
            self.created_time = created_time
        if last_modified_time is not None:
            self.last_modified_time = last_modified_time
        if author is not None:
            self.author = author
        if edit_mode is not None:
            self.edit_mode = edit_mode
        if config is not None:
            self.config = config
        if comments is not None:
            self.comments = comments

    @property
    def id(self):
        """Gets the id of this ModelFlowChartMeta.  # noqa: E501


        :return: The id of this ModelFlowChartMeta.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelFlowChartMeta.


        :param id: The id of this ModelFlowChartMeta.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this ModelFlowChartMeta.  # noqa: E501


        :return: The kind of this ModelFlowChartMeta.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ModelFlowChartMeta.


        :param kind: The kind of this ModelFlowChartMeta.  # noqa: E501
        :type: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501

        self._kind = kind

    @property
    def created_time(self):
        """Gets the created_time of this ModelFlowChartMeta.  # noqa: E501


        :return: The created_time of this ModelFlowChartMeta.  # noqa: E501
        :rtype: float
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this ModelFlowChartMeta.


        :param created_time: The created_time of this ModelFlowChartMeta.  # noqa: E501
        :type: float
        """

        self._created_time = created_time

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this ModelFlowChartMeta.  # noqa: E501


        :return: The last_modified_time of this ModelFlowChartMeta.  # noqa: E501
        :rtype: float
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this ModelFlowChartMeta.


        :param last_modified_time: The last_modified_time of this ModelFlowChartMeta.  # noqa: E501
        :type: float
        """

        self._last_modified_time = last_modified_time

    @property
    def author(self):
        """Gets the author of this ModelFlowChartMeta.  # noqa: E501


        :return: The author of this ModelFlowChartMeta.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this ModelFlowChartMeta.


        :param author: The author of this ModelFlowChartMeta.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def edit_mode(self):
        """Gets the edit_mode of this ModelFlowChartMeta.  # noqa: E501


        :return: The edit_mode of this ModelFlowChartMeta.  # noqa: E501
        :rtype: str
        """
        return self._edit_mode

    @edit_mode.setter
    def edit_mode(self, edit_mode):
        """Sets the edit_mode of this ModelFlowChartMeta.


        :param edit_mode: The edit_mode of this ModelFlowChartMeta.  # noqa: E501
        :type: str
        """

        self._edit_mode = edit_mode

    @property
    def config(self):
        """Gets the config of this ModelFlowChartMeta.  # noqa: E501


        :return: The config of this ModelFlowChartMeta.  # noqa: E501
        :rtype: object
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this ModelFlowChartMeta.


        :param config: The config of this ModelFlowChartMeta.  # noqa: E501
        :type: object
        """

        self._config = config

    @property
    def comments(self):
        """Gets the comments of this ModelFlowChartMeta.  # noqa: E501


        :return: The comments of this ModelFlowChartMeta.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this ModelFlowChartMeta.


        :param comments: The comments of this ModelFlowChartMeta.  # noqa: E501
        :type: str
        """

        self._comments = comments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelFlowChartMeta, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelFlowChartMeta):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
