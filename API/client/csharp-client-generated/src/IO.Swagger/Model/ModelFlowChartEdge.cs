/* 
 * Machine fault diagnosis
 *
 * List of top level server APIs
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ModelFlowChartEdge
    /// </summary>
    [DataContract]
        public partial class ModelFlowChartEdge :  IEquatable<ModelFlowChartEdge>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelFlowChartEdge" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="fixedConfig">user-defined fixed configurations.</param>
        /// <param name="linkedNodes">linkedNodes.</param>
        /// <param name="scripts">the address in DB where it is stored.</param>
        public ModelFlowChartEdge(string id = default(string), string fixedConfig = default(string), List<Object> linkedNodes = default(List<Object>), string scripts = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for ModelFlowChartEdge and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            this.FixedConfig = fixedConfig;
            this.LinkedNodes = linkedNodes;
            this.Scripts = scripts;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// user-defined fixed configurations
        /// </summary>
        /// <value>user-defined fixed configurations</value>
        [DataMember(Name="fixed_config", EmitDefaultValue=false)]
        public string FixedConfig { get; set; }

        /// <summary>
        /// Gets or Sets LinkedNodes
        /// </summary>
        [DataMember(Name="linked_nodes", EmitDefaultValue=false)]
        public List<Object> LinkedNodes { get; set; }

        /// <summary>
        /// the address in DB where it is stored
        /// </summary>
        /// <value>the address in DB where it is stored</value>
        [DataMember(Name="scripts", EmitDefaultValue=false)]
        public string Scripts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelFlowChartEdge {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FixedConfig: ").Append(FixedConfig).Append("\n");
            sb.Append("  LinkedNodes: ").Append(LinkedNodes).Append("\n");
            sb.Append("  Scripts: ").Append(Scripts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelFlowChartEdge);
        }

        /// <summary>
        /// Returns true if ModelFlowChartEdge instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelFlowChartEdge to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelFlowChartEdge input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.FixedConfig == input.FixedConfig ||
                    (this.FixedConfig != null &&
                    this.FixedConfig.Equals(input.FixedConfig))
                ) && 
                (
                    this.LinkedNodes == input.LinkedNodes ||
                    this.LinkedNodes != null &&
                    input.LinkedNodes != null &&
                    this.LinkedNodes.SequenceEqual(input.LinkedNodes)
                ) && 
                (
                    this.Scripts == input.Scripts ||
                    (this.Scripts != null &&
                    this.Scripts.Equals(input.Scripts))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.FixedConfig != null)
                    hashCode = hashCode * 59 + this.FixedConfig.GetHashCode();
                if (this.LinkedNodes != null)
                    hashCode = hashCode * 59 + this.LinkedNodes.GetHashCode();
                if (this.Scripts != null)
                    hashCode = hashCode * 59 + this.Scripts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
