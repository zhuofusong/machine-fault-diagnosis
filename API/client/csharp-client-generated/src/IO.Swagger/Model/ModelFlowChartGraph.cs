/* 
 * Machine fault diagnosis
 *
 * List of top level server APIs
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ModelFlowChartGraph
    /// </summary>
    [DataContract]
        public partial class ModelFlowChartGraph :  IEquatable<ModelFlowChartGraph>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelFlowChartGraph" /> class.
        /// </summary>
        /// <param name="nodes">nodes (required).</param>
        /// <param name="nodeComponents">nodeComponents.</param>
        /// <param name="edges">edges (required).</param>
        /// <param name="extensions">extensions.</param>
        public ModelFlowChartGraph(List<ModelFlowChartNodeMeta> nodes = default(List<ModelFlowChartNodeMeta>), List<ModelFlowChartNodeComponentMeta> nodeComponents = default(List<ModelFlowChartNodeComponentMeta>), List<ModelFlowChartEdgeMeta> edges = default(List<ModelFlowChartEdgeMeta>), List<ModelFlowChartExtensionMeta> extensions = default(List<ModelFlowChartExtensionMeta>))
        {
            // to ensure "nodes" is required (not null)
            if (nodes == null)
            {
                throw new InvalidDataException("nodes is a required property for ModelFlowChartGraph and cannot be null");
            }
            else
            {
                this.Nodes = nodes;
            }
            // to ensure "edges" is required (not null)
            if (edges == null)
            {
                throw new InvalidDataException("edges is a required property for ModelFlowChartGraph and cannot be null");
            }
            else
            {
                this.Edges = edges;
            }
            this.NodeComponents = nodeComponents;
            this.Extensions = extensions;
        }
        
        /// <summary>
        /// Gets or Sets Nodes
        /// </summary>
        [DataMember(Name="nodes", EmitDefaultValue=false)]
        public List<ModelFlowChartNodeMeta> Nodes { get; set; }

        /// <summary>
        /// Gets or Sets NodeComponents
        /// </summary>
        [DataMember(Name="node_components", EmitDefaultValue=false)]
        public List<ModelFlowChartNodeComponentMeta> NodeComponents { get; set; }

        /// <summary>
        /// Gets or Sets Edges
        /// </summary>
        [DataMember(Name="edges", EmitDefaultValue=false)]
        public List<ModelFlowChartEdgeMeta> Edges { get; set; }

        /// <summary>
        /// Gets or Sets Extensions
        /// </summary>
        [DataMember(Name="extensions", EmitDefaultValue=false)]
        public List<ModelFlowChartExtensionMeta> Extensions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelFlowChartGraph {\n");
            sb.Append("  Nodes: ").Append(Nodes).Append("\n");
            sb.Append("  NodeComponents: ").Append(NodeComponents).Append("\n");
            sb.Append("  Edges: ").Append(Edges).Append("\n");
            sb.Append("  Extensions: ").Append(Extensions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelFlowChartGraph);
        }

        /// <summary>
        /// Returns true if ModelFlowChartGraph instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelFlowChartGraph to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelFlowChartGraph input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Nodes == input.Nodes ||
                    this.Nodes != null &&
                    input.Nodes != null &&
                    this.Nodes.SequenceEqual(input.Nodes)
                ) && 
                (
                    this.NodeComponents == input.NodeComponents ||
                    this.NodeComponents != null &&
                    input.NodeComponents != null &&
                    this.NodeComponents.SequenceEqual(input.NodeComponents)
                ) && 
                (
                    this.Edges == input.Edges ||
                    this.Edges != null &&
                    input.Edges != null &&
                    this.Edges.SequenceEqual(input.Edges)
                ) && 
                (
                    this.Extensions == input.Extensions ||
                    this.Extensions != null &&
                    input.Extensions != null &&
                    this.Extensions.SequenceEqual(input.Extensions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Nodes != null)
                    hashCode = hashCode * 59 + this.Nodes.GetHashCode();
                if (this.NodeComponents != null)
                    hashCode = hashCode * 59 + this.NodeComponents.GetHashCode();
                if (this.Edges != null)
                    hashCode = hashCode * 59 + this.Edges.GetHashCode();
                if (this.Extensions != null)
                    hashCode = hashCode * 59 + this.Extensions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
